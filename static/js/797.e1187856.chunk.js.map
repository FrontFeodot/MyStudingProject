{"version":3,"file":"static/js/797.e1187856.chunk.js","mappings":"qNAQMA,EAAY,SAACC,GACjB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,WAAY,SAEdC,iBAAkBC,EAAAA,GAAW,CAC3BJ,MAAOI,EAAAA,KAAaC,SAAS,kBAC7BJ,SAAUG,EAAAA,KACPC,SAAS,kBACTC,IAAI,GAAI,8BACRC,IAAI,EAAG,+BAEZC,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCf,EAAMgB,MAAMH,EAAOT,MAAOS,EAAOR,SAAUQ,EAAOP,WAAYS,GAC9DD,GAAc,MAIlB,OACE,+BACE,SAAC,KAAD,CACEX,cAAeF,EAAOE,cACtBc,gBAAc,EACdL,SAAUX,EAAOiB,aACjBX,iBAAkBN,EAAOM,iBAJ3B,UAME,UAAC,KAAD,YACE,iBACEY,UACElB,EAAOmB,OAAOhB,OAASH,EAAOoB,QAAQjB,OAASkB,EAAAA,EAAAA,MAFnD,WAKE,kBACEC,GAAG,QACHC,KAAM,OACNC,YAAa,QACbC,KAAM,QACNC,OAAQ1B,EAAO2B,WACfC,SAAU5B,EAAO6B,aACjBC,MAAO9B,EAAOY,OAAOT,MACrB4B,aAAa,OAEd/B,EAAOmB,OAAOhB,OAASH,EAAOoB,QAAQjB,QACrC,0BAAOH,EAAOmB,OAAOhB,YAIzB,iBACEe,UACElB,EAAOmB,OAAOf,UAAYJ,EAAOoB,QAAQhB,UAAYiB,EAAAA,EAAAA,MAFzD,WAKE,kBACEC,GAAG,WACHE,YAAa,WACbC,KAAM,WACNF,KAAM,WACNG,OAAQ1B,EAAO2B,WACfC,SAAU5B,EAAO6B,aACjBC,MAAO9B,EAAOY,OAAOR,SACrB2B,aAAa,OAEd/B,EAAOmB,OAAOf,UAAYJ,EAAOoB,QAAQhB,WACxC,0BAAOJ,EAAOmB,OAAOf,eAIzB,4BACE,kBAAOqB,KAAM,aAAcF,KAAM,aADnC,kBAIA,0BACE,mBAAQA,KAAK,SAAb,uBAEF,gBAAKL,UAAWG,EAAAA,EAAAA,aAAhB,SAAqCrB,EAAOgC,iBAwBtD,WAAeC,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEpB,MAAAA,EAAAA,IAA1C,EAjBc,SAAChB,GACb,OAAIA,EAAMoC,QACD,SAAC,KAAD,CAAUE,GAAI,cAIrB,4BACE,mCACA,SAACvC,EAAD,CAAWiB,MAAOhB,EAAMgB","sources":["components/Login/Login.jsx"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-Reducer.js';\r\nimport { Navigate } from 'react-router-dom';\r\nimport style from '../common/FormsControls/formsControl.module.css';\r\nimport { Formik, Form, useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst LoginForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: 'false',\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().required('Required field'),\r\n      password: Yup.string()\r\n        .required('Required field')\r\n        .max(20, 'Must be 20 symbols or less')\r\n        .min(4, 'Must be 4 or more symbols'),\r\n    }),\r\n    onSubmit: (values, { setSubmitting, setStatus }) => {\r\n      props.login(values.email, values.password, values.rememberMe, setStatus);\r\n      setSubmitting(false);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={formik.initialValues}\r\n        validateOnBlur\r\n        onSubmit={formik.handleSubmit}\r\n        validationSchema={formik.validationSchema}\r\n      >\r\n        <Form>\r\n          <div\r\n            className={\r\n              formik.errors.email && formik.touched.email && style.error\r\n            }\r\n          >\r\n            <input\r\n              id='email'\r\n              type={'text'}\r\n              placeholder={'email'}\r\n              name={'email'}\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.email}\r\n              autoComplete='on'\r\n            />\r\n            {formik.errors.email && formik.touched.email && (\r\n              <span>{formik.errors.email}</span>\r\n            )}\r\n          </div>\r\n\r\n          <div\r\n            className={\r\n              formik.errors.password && formik.touched.password && style.error\r\n            }\r\n          >\r\n            <input\r\n              id='password'\r\n              placeholder={'password'}\r\n              name={'password'}\r\n              type={'password'}\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.password}\r\n              autoComplete='on'\r\n            />\r\n            {formik.errors.password && formik.touched.password && (\r\n              <span>{formik.errors.password}</span>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <input name={'rememberMe'} type={'checkbox'} />\r\n            Remember Me\r\n          </div>\r\n          <div>\r\n            <button type='submit'>Submit</button>\r\n          </div>\r\n          <div className={style.invalidLogin}>{formik.status}</div>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Login = (props) => {\r\n  if (props.isAuth) {\r\n    return <Navigate to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginForm login={props.login} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"names":["LoginForm","props","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","required","max","min","onSubmit","values","setSubmitting","setStatus","login","validateOnBlur","handleSubmit","className","errors","touched","style","id","type","placeholder","name","onBlur","handleBlur","onChange","handleChange","value","autoComplete","status","connect","state","isAuth","auth","to"],"sourceRoot":""}