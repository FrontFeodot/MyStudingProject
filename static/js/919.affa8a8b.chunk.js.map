{"version":3,"file":"static/js/919.affa8a8b.chunk.js","mappings":"uNAGIA,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,S,UCHrB,GAAgB,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,IAAM,sB,UCmBhK,MAhBA,SAAoBE,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,gBAAKC,UAAWC,EAAAA,OAAe,IAAMA,EAAAA,OAArC,UACE,UAAC,KAAD,CAASC,GAAIJ,EAAb,WACE,gBACEE,UAAWC,EAAAA,IACXE,IAAKN,EAAMO,IACXC,IAAG,UAAKR,EAAMS,KAAX,eAEJT,EAAMS,WCRf,MAJA,SAAiBT,GACf,OAAO,yBAAMA,EAAMU,W,8BCyCrB,EAxCuB,SAACV,GACtB,IAAMW,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,eAAgB,IAElBC,iBAAkBC,EAAAA,GAAW,CAC3BF,eAAgBE,EAAAA,KAAaC,IAAI,IAAK,sBAExCC,SAAU,SAACC,GACTnB,EAAMoB,YAAYD,EAAOL,mBAG7B,OACE,SAAC,KAAD,CAAQD,cAAeF,EAAOE,cAAeK,SAAUP,EAAOU,aAA9D,UACE,UAAC,KAAD,YACE,iBACElB,UACEQ,EAAOW,OAAOR,gBACdH,EAAOY,QAAQT,gBACfV,EAAAA,EAAAA,MAJJ,WAOE,qBACED,UAAWC,EAAAA,EAAAA,YACXK,KAAK,iBACLP,GAAG,iBACHsB,YAAY,qBACZC,OAAQd,EAAOe,WACfC,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOQ,OAAOL,iBAEtBH,EAAOW,OAAOR,gBAAkBH,EAAOY,QAAQT,iBAC9C,0BAAOH,EAAOW,OAAOR,qBAGzB,mBAAQgB,KAAK,SAAb,gCCAR,EAhCgB,SAAC9B,GACf,IAAIH,EAAQG,EAAM+B,YACdC,EAAkBnC,EAAMoC,YAAYC,KAAI,SAACC,GAAD,OAC1C,SAAC,EAAD,CACE1B,KAAM0B,EAAO1B,KAEbP,GAAIiC,EAAOjC,GACXK,IAAK4B,EAAO5B,KAFP4B,EAAOjC,OAMZkC,EAAmBvC,EAAMwC,aAAaH,KAAI,SAACxB,GAAD,OAC5C,SAAC,EAAD,CAASR,GAAIQ,EAAQR,GAAqBQ,QAASA,EAAQA,SAA7BA,EAAQR,OAGxC,OAAKF,EAAMF,QAGT,iBAAKK,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,gBAAhB,SAAwC4B,KACxC,iBAAK7B,UAAWC,EAAAA,SAAhB,WACE,yBAAMgC,KACN,oBACA,SAAC,EAAD,CAAgBhB,YAAapB,EAAMoB,qBARf,SAAC,KAAD,CAAUf,GAAI,YCF1C,GAAeiC,EAAAA,EAAAA,KNbiB,SAACC,GAS/B,OAHqCC,EAAAA,EAAAA,IAAQ5C,EAAR4C,EALX,SAACxC,GACzB,OAAKA,EAAMF,QACJ,SAACyC,GAAD,UAAevC,KADI,SAAC,KAAD,CAAUK,GAAI,iBMa1CmC,EAAAA,EAAAA,KAfoB,SAAC3C,GACrB,MAAO,CACLkC,YAAalC,EAAM4C,iBAGE,SAACC,GACxB,MAAO,CACLtB,YAAa,SAACN,GACZ4B,GAASC,EAAAA,EAAAA,GAAmB7B,SAKlC,CAGE8B","sources":["hoc/withAuthRedirect.js","webpack://chernovick/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/NewMessageForm/NewMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/Dialogs-Container.jsx"],"sourcesContent":["import { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  const RedirectComponent = (props) => {\r\n    if (!props.isAuth) return <Navigate to={'/login'} />;\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__XZOqL\",\"dialog\":\"Dialogs_dialog__AFixY\",\"active\":\"Dialogs_active__b1X9k\",\"messages\":\"Dialogs_messages__gPRQ9\",\"img\":\"Dialogs_img__9b5DG\"};","import React from 'react';\r\nimport style from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction DialogItem(props) {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <div className={style.dialog + ' ' + style.active}>\r\n      <NavLink to={path}>\r\n        <img\r\n          className={style.img}\r\n          src={props.img}\r\n          alt={`${props.name}'s avatar`}\r\n        />\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\n\r\nfunction Message(props) {\r\n  return <div>{props.message}</div>;\r\n}\r\n\r\nexport default Message;\r\n","import { Form, Formik, useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport style from '../../common/FormsControls/formsControl.module.css';\r\n\r\nconst NewMessageForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newMessageBody: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      newMessageBody: Yup.string().max(300, 'Too much message'),\r\n    }),\r\n    onSubmit: (values) => {\r\n      props.sendMessage(values.newMessageBody);\r\n    },\r\n  });\r\n  return (\r\n    <Formik initialValues={formik.initialValues} onSubmit={formik.handleSubmit}>\r\n      <Form>\r\n        <div\r\n          className={\r\n            formik.errors.newMessageBody &&\r\n            formik.touched.newMessageBody &&\r\n            style.error\r\n          }\r\n        >\r\n          <textarea\r\n            className={style.messageForm}\r\n            name='newMessageBody'\r\n            id='newMessageBody'\r\n            placeholder='Enter your message'\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            value={formik.values.newMessageBody}\r\n          />\r\n          {formik.errors.newMessageBody && formik.touched.newMessageBody && (\r\n            <span>{formik.errors.newMessageBody}</span>\r\n          )}\r\n        </div>\r\n        <button type='submit'>Send message</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\nexport default NewMessageForm;\r\n","import React from 'react';\r\nimport style from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Navigate } from 'react-router-dom';\r\nimport NewMessageForm from './NewMessageForm/NewMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogsData.map((dialog) => (\r\n    <DialogItem\r\n      name={dialog.name}\r\n      key={dialog.id}\r\n      id={dialog.id}\r\n      img={dialog.img}\r\n    />\r\n  ));\r\n\r\n  let messagesElements = state.messagesData.map((message) => (\r\n    <Message id={message.id} key={message.id} message={message.message} />\r\n  ));\r\n\r\n  if (!props.isAuth) return <Navigate to={'/Login'} />;\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogsElements}>{dialogsElements}</div>\r\n      <div className={style.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div></div>\r\n        <NewMessageForm sendMessage={props.sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* const ReduxNewMessageForm = reduxForm({\r\n  form: 'newMessageBody',\r\n})(NewMessageForm); */\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { sendMessageCreator } from '../../redux/messages-Reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.messagesPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","props","path","id","className","style","to","src","img","alt","name","message","formik","useFormik","initialValues","newMessageBody","validationSchema","Yup","max","onSubmit","values","sendMessage","handleSubmit","errors","touched","placeholder","onBlur","handleBlur","onChange","handleChange","value","type","dialogsPage","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","compose","Component","connect","messagesPage","dispatch","sendMessageCreator","Dialogs"],"sourceRoot":""}