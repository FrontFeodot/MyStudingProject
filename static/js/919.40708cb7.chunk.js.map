{"version":3,"file":"static/js/919.40708cb7.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.js","webpack://my-studing-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/NewMessageForm/NewMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/Dialogs-Container.jsx"],"sourcesContent":["import { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  const RedirectComponent = (props) => {\r\n    if (!props.isAuth) return <Navigate to={'/login'} />;\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__XZOqL\",\"dialog\":\"Dialogs_dialog__AFixY\",\"active\":\"Dialogs_active__b1X9k\",\"messages\":\"Dialogs_messages__gPRQ9\",\"img\":\"Dialogs_img__9b5DG\"};","import React from 'react';\r\nimport style from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction DialogItem(props) {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <div className={style.dialog + ' ' + style.active}>\r\n      <NavLink\r\n        to={path}\r\n        onClick={() => {\r\n          props.getDialogsWithFriend(props.id);\r\n          props.startChatting(props.id);\r\n        }}\r\n      >\r\n        <img\r\n          className={style.img}\r\n          src={props.img}\r\n          alt={`${props.name}'s avatar`}\r\n        />\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\n\r\nfunction Message(props) {\r\n  return <div>{props.message}</div>;\r\n}\r\n\r\nexport default Message;\r\n","import { Form, Formik, useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport style from '../../common/FormsControls/formsControl.module.css';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { Button } from 'primereact/button';\r\n\r\nconst NewMessageForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newMessageBody: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      newMessageBody: Yup.string().max(300, 'Too much message'),\r\n    }),\r\n    onSubmit: (values) => {\r\n      props.sendMessage(values.newMessageBody, props.userIdForMessage);\r\n    },\r\n  });\r\n  return (\r\n    <Formik\r\n      initialValues={formik.initialValues}\r\n      onSubmit={formik.handleSubmit}\r\n      className={style.messageForm}\r\n    >\r\n      <Form>\r\n        <div\r\n          className={\r\n            formik.errors.newMessageBody &&\r\n            formik.touched.newMessageBody &&\r\n            style.error\r\n          }\r\n        >\r\n          <div className={style.messageForm}>\r\n            <InputTextarea\r\n              className={style.messageFormArea}\r\n              name='newMessageBody'\r\n              id='newMessageBody'\r\n              placeholder='Enter your message'\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              value={formik.values.newMessageBody}\r\n            />\r\n            {formik.errors.newMessageBody && formik.touched.newMessageBody && (\r\n              <span>{formik.errors.newMessageBody}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          aria-label='Submit'\r\n          className='p-button-success'\r\n          label='Send message'\r\n          type='submit'\r\n        />\r\n        {props.responseMessage ? (\r\n          <span className={style.error}>{props.responseMessage}</span>\r\n        ) : null}\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\nexport default NewMessageForm;\r\n","import React, { useEffect } from 'react';\r\nimport style from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Navigate } from 'react-router-dom';\r\nimport NewMessageForm from './NewMessageForm/NewMessageForm';\r\nimport { getDialogsWithFriend } from '../../redux/messages-reducer';\r\n\r\nconst Dialogs = ({ getAllDialogs, ...props }) => {\r\n  useEffect(() => {\r\n    getAllDialogs();\r\n  }, [getAllDialogs]);\r\n  let interlocutorsList;\r\n  let messagesElements;\r\n  if (props.interlocutors) {\r\n    interlocutorsList = props.interlocutors.map((dialog, key) => (\r\n      <DialogItem\r\n        name={dialog.userName}\r\n        key={key}\r\n        id={dialog.id}\r\n        img={dialog.photos.large}\r\n        getDialogsWithFriend={props.getDialogsWithFriend}\r\n        startChatting={props.startChatting}\r\n      />\r\n    ));\r\n  } else {\r\n    interlocutorsList = <span>No friends</span>;\r\n  }\r\n  if (props.messagesData && props.messagesData[0]) {\r\n    messagesElements = props.messagesData.map((interlocutor, key) => (\r\n      <Message id={interlocutor.id} key={key} message={interlocutor.message} />\r\n    ));\r\n  } else {\r\n    messagesElements = <span>No messages</span>;\r\n  }\r\n  if (!props.isAuth) return <Navigate to={'/Login'} />;\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogsElements}>{interlocutorsList}</div>\r\n      <div className={style.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div></div>\r\n        <NewMessageForm\r\n          sendMessage={props.sendMessage}\r\n          userIdForMessage={props.userIdForMessage}\r\n          responseMessage={props.responseMessage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* const ReduxNewMessageForm = reduxForm({\r\n  form: 'newMessageBody',\r\n})(NewMessageForm); */\r\nexport default Dialogs;\r\n","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport {\r\n  startChatting,\r\n  getDialogsWithFriend,\r\n  getAllDialogs,\r\n  sendMessage,\r\n} from '../../redux/messages-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    interlocutors: state.messagesPage.interlocutors,\r\n    messagesData: state.messagesPage.messagesData,\r\n    userIdForMessage: state.messagesPage.userIdForMessage,\r\n    responseMessage: state.messagesPage.responseMessage,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, {\r\n    getDialogsWithFriend,\r\n    getAllDialogs,\r\n    sendMessage,\r\n    startChatting,\r\n  })\r\n)(Dialogs);\r\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","props","path","id","className","style","to","onClick","getDialogsWithFriend","startChatting","src","img","alt","name","message","formik","useFormik","initialValues","newMessageBody","validationSchema","Yup","max","onSubmit","values","sendMessage","userIdForMessage","handleSubmit","errors","touched","placeholder","onBlur","handleBlur","onChange","handleChange","value","label","type","responseMessage","interlocutorsList","messagesElements","getAllDialogs","useEffect","interlocutors","map","dialog","key","userName","photos","large","messagesData","interlocutor","compose","Component","connect","messagesPage","Dialogs"],"sourceRoot":""}